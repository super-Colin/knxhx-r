print('hello world')
library(shiny)
library(rds.r)
library(geojsonio)
library(ggplot2)
library(leaflet)
library(arulesViz)
# Knox Hack data Server
knoxServer <- get.rds("https://knxhx.richdataservices.com/rds")
knoxHealthCatalog <- getCatalog(knoxServer, "kchd")
knoxResourcesProduct <- getDataProduct(knoxHealthCatalog, "us_tn_kchd_capacity")
knoxResourcesProductData <-
rds.tabulate(
knoxResourcesProduct,
dimensions = c("date_stamp", "resource_type"),
measures = c("cnt_used",
"cnt_capacity"),
totals = F
)
plot(knoxResourcesProductData)
View(knoxResourcesProduct)
View(knoxServer)
View(knoxResourcesProduct)
View(knoxHealthCatalog)
View(knoxResourcesProduct)
library(readr)
SCOOT <- read_csv("C:/xampp/htdocs/RStudio/VEoRide_DataFormat_3.csv")
View(SCOOT)
save(SCOOT, file = "Scoot.RData")
warnings()
version()
version
save(SCOOT, file = "Scoot.RData")
getwd()
getwd()
setwd("C:/xampp/htdocs/RStudio")
save(SCOOT, file = "Scoot.RData")
knitr::opts_chunk$set(echo = TRUE)
#save(SCOOT, file = "Scoot.RData")
load("Scoot.RData")
SCOOTBack<-SCOOT
summary(cars)
library(lubridate)
SCOOT<-data.frame(SCOOT)
SCOOT$Date<-mdy(SCOOT$Date)
length(unique(SCOOT$Date)) #293 unique dates
#make another df that is the number of rides per date
summary(SCOOT$geometry)
head(SCOOT)
SCOOT$geometry[1] #geometry is the intermediat coordinates between end coordinates and end coordinates format is: lat,long
SCOOT$end_lon[1]
summary(SCOOT)
#Beg.Latitude / (180/pi)
SCOOT$start_lat/(180/(22/7))
SCOOT$StartLonTrans<-NA
SCOOT$EndLonTrans<-NA
SCOOT$StartLatTrans<-NA
SCOOT$EndLatTrans<-NA
#loop through to get the transformed lat/log
which(colnames(SCOOT)=="StartLonTrans")
colnames(SCOOT)[9:ncol(SCOOT)]
which(colnames(SCOOT)=="start_lon")
for (i in 9:ncol(SCOOT)) {
SCOOT[,i]<-SCOOT[,i]<-SCOOT[,i-5]/(180/(22/7))
}
#sanity check
SCOOT$start_lat[43]/(180/(22/7))
SCOOT$StartLatTrans[43]
#needs to be a factor
SCOOT$Time
summary(SCOOT)
#Beg.Latitude / (180/pi)
SCOOT$start_lat/(180/(22/7))
SCOOT$StartLonTrans<-NA
SCOOT$EndLonTrans<-NA
SCOOT$StartLatTrans<-NA
SCOOT$EndLatTrans<-NA
#loop through to get the transformed lat/log
which(colnames(SCOOT)=="StartLonTrans")
colnames(SCOOT)[9:ncol(SCOOT)]
which(colnames(SCOOT)=="start_lon")
for (i in 9:ncol(SCOOT)) {
SCOOT[,i]<-SCOOT[,i]<-SCOOT[,i-5]/(180/(22/7))
}
#sanity check
SCOOT$start_lat[43]/(180/(22/7))
SCOOT$StartLatTrans[43]
#needs to be a factor
SCOOT$Time
summary(SCOOT)
#Beg.Latitude / (180/pi)
SCOOT$start_lat/(180/(22/7))
SCOOT$StartLonTrans<-NA
SCOOT$EndLonTrans<-NA
SCOOT$StartLatTrans<-NA
SCOOT$EndLatTrans<-NA
#loop through to get the transformed lat/log
which(colnames(SCOOT)=="StartLonTrans")
colnames(SCOOT)[9:ncol(SCOOT)]
which(colnames(SCOOT)=="start_lon")
for (i in 9:ncol(SCOOT)) {
SCOOT[,i]<-SCOOT[,i]<-SCOOT[,i-5]/(180/(22/7))
}
#sanity check
SCOOT$start_lat[43]/(180/(22/7))
SCOOT$StartLatTrans[43]
#needs to be a factor
SCOOT$Time
summary(SCOOT)
#Beg.Latitude / (180/pi)
SCOOT$start_lat/(180/(22/7))
SCOOT$StartLonTrans<-NA
SCOOT$EndLonTrans<-NA
SCOOT$StartLatTrans<-NA
SCOOT$EndLatTrans<-NA
#loop through to get the transformed lat/log
which(colnames(SCOOT)=="StartLonTrans")
colnames(SCOOT)[9:ncol(SCOOT)]
which(colnames(SCOOT)=="start_lon")
for (i in 9:ncol(SCOOT)) {
SCOOT[,i]<-SCOOT[,i]<-SCOOT[,i-5]/(180/(22/7))
}
#sanity check
SCOOT$start_lat[43]/(180/(22/7))
SCOOT$StartLatTrans[43]
#needs to be a factor
#SCOOT$Time
SCOOT$Time[1]
SCOOT$Hour<-as.numeric(substring(SCOOT$Time, 1,2))
summary(SCOOT)
SCOOT$Hour[1]
substring(SCOOT$Time,1,2)
summary(SCOOT)
###substring ex
substring(levels(TIT$Ticket)[706:length(levels(TIT$Ticket))], 1, 1)
shiny::runApp('test-site')
runApp('test-site')
View(SCOOTBack)
View(SCOOT)
runApp('test-site')
runApp('test-site')
runApp('test-site')
runApp('test-site')
runApp('test-site')
runApp('test-site')
runApp('test-site')
runApp('test-site')
runApp('test-site')
getwd()
runApp('test-site')
runApp('test-site')
runApp('test-site')
runApp('knxhx-r')
runApp('knxhx-r')
runApp('knxhx-r')
+>
+
fds
;
runApp('knxhx-r')
runApp('SuperColin')
setwd("C:/xampp/htdocs/RStudio/knxhx-r/SuperColin")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
runApp()
getwd()
# By day of week
x <- data1  %>%
group_by(weekday) %>%
summarise(counts = , n())
install.packages("dplyr")
install.packages("lubridate")
install.packages("sf")
install.packages("dplyr")
install.packages("lubridate")
install.packages("sf")
install.packages("mapview")
install.packages("ggmap")
install.packages('tidyverse')
install.packages('ggmap')
